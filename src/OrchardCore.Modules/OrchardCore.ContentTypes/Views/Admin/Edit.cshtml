@model EditTypeViewModel
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.ContentManagement.Metadata.Settings
@using OrchardCore.Mvc.Utilities

@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentTypes.Services.IContentDefinitionService ContentDefinitionService

@{
    var typePart = Model.TypeDefinition.Parts.FirstOrDefault(x => String.Equals(x.Name, Model.TypeDefinition.Name, StringComparison.OrdinalIgnoreCase));
    var partDefinitions = Model.TypeDefinition.Parts
        .Select(part =>
        {
            var defaultPosition = ContentDefinitionManager.GetPartDefinition(part.PartDefinition.Name)?.DefaultPosition() ?? "5";
            return new { Part = part, Order = int.Parse(part.GetSettings<ContentTypePartSettings>().Position ?? defaultPosition) };
        })
        .OrderBy(x => x.Order)
        .Select(x => x.Part);

    var fieldDefintions = new List<ContentPartFieldDefinition>();

    if (typePart?.PartDefinition?.Fields != null)
    {
        fieldDefintions = typePart.PartDefinition.Fields
        .Select(field => new { Field = field, Order = int.Parse(field.GetSettings<ContentPartFieldSettings>().Position ?? "0") })
        .OrderBy(x => x.Order)
        .Select(x => x.Field)
        .ToList();
    }

    var fields = ContentDefinitionService.GetFields().ToList();
}

<zone Name="Title"><h1>@RenderTitleSegments(T["Edit Content Type - {0}", Model.TypeDefinition.DisplayName])</h1></zone>

<form asp-action="Edit">
    @Html.ValidationSummary()

    <input type="hidden" asp-for="Name" />

    @if (Model.Editor.Shortcuts != null)
    {
        <div class="mb-3">
            @await DisplayAsync(Model.Editor.Shortcuts)
        </div>
    }

    @await DisplayAsync(Model.Editor)

    @if (fieldDefintions.Count > 0 || fields.Count > 0)
    {
        <div class="mb-3">
            <h3>@T["Fields"]</h3>

            <ul class="list-group sortable" id="fields">
                @foreach (var fieldDefintion in fieldDefintions)
                {
                    <li class="list-group-item" style="cursor: move;">
                        <div class="w-100">
                            <div class="float-end">
                                @if (fields.Any(field => String.Equals(field.Name, fieldDefintion.FieldDefinition.Name, StringComparison.OrdinalIgnoreCase)))
                                {
                                    <a asp-route-action="EditField" asp-route-id="@Model.TypeDefinition.Name" asp-route-name="@fieldDefintion.Name" asp-route-returnUrl="@FullRequestPath" class="btn btn-primary btn-sm" role="button">@T["Edit"]</a>
                                }
                                <a asp-route-action="RemoveFieldFrom" asp-route-id="@Model.TypeDefinition.Name" asp-route-name="@fieldDefintion.Name" class="btn btn-danger btn-sm" role="button" data-url-af="UnsafeUrl RemoveUrl">@T["Remove"]</a>
                            </div>
                            @fieldDefintion.DisplayName() <span class="hint dashed">@fieldDefintion.FieldDefinition.Name.CamelFriendly()</span>

                            @if (!String.IsNullOrEmpty(fieldDefintion.DisplayMode()))
                            {
                                <span class="badge ta-badge font-weight-normal" data-bs-toggle="tooltip" title="@T["Display mode"]"><i class="fas fa-tv text-info" aria-hidden="true"></i> @fieldDefintion.DisplayMode()</span>
                            }
                            @if (!String.IsNullOrEmpty(fieldDefintion.Editor()))
                            {
                                <span class="badge ta-badge font-weight-normal" data-bs-toggle="tooltip" title="@T["Editor"]"><i class="fa fa-edit text-info" aria-hidden="true"></i> @fieldDefintion.Editor()</span>
                            }
                        </div>
                        <input type="hidden" asp-for="OrderedFieldNames" value="@fieldDefintion.Name" />
                    </li>
                }
            </ul>
        </div>

        @if (fields.Count > 0)
        {
            <div class="mb-3">
                <a asp-route-action="AddFieldTo" asp-route-id="@Model.TypeDefinition.Name" asp-route-returnUrl="@FullRequestPath" class="btn btn-info btn-sm" role="button">@T["Add Field"]</a>
            </div>
        }
    }
    <div class="mb-3">
        <h3>@T["Parts"]</h3>

        <ul class="list-group sortable" id="parts">
            @foreach (var partDefinition in partDefinitions)
            {
                <li class="list-group-item @(partDefinition == typePart ? " bg-faded" : null)" style="cursor: move;">
                    <div class="w-100">
                        @partDefinition.DisplayName()

                        @if (partDefinition != typePart)
                        {
                            @if (!String.IsNullOrEmpty(partDefinition.Description()))
                            {
                                <span class="hint dashed">@partDefinition.Description()</span>
                            }

                            <div class="float-end">
                                <a asp-route-action="EditTypePart" asp-route-id="@Model.TypeDefinition.Name" asp-route-name="@partDefinition.Name" class="btn btn-primary btn-sm" role="button">@T["Edit"]</a>
                                <a asp-route-action="RemovePart" asp-route-id="@Model.TypeDefinition.Name" asp-route-name="@partDefinition.Name" class="btn btn-danger btn-sm" role="button" data-url-af="UnsafeUrl RemoveUrl">@T["Remove"]</a>
                            </div>
                        }
                        else
                        {
                            <span class="hint dashed">@T["Contains the fields for the current type"]</span>
                        }

                        @if (!String.IsNullOrEmpty(partDefinition.DisplayMode()))
                        {
                            <span class="badge ta-badge font-weight-normal" data-bs-toggle="tooltip" title="@T["Display mode"]"><i class="fas fa-tv text-info" aria-hidden="true"></i> @partDefinition.DisplayMode()</span>
                        }
                        @if (!String.IsNullOrEmpty(partDefinition.Editor()))
                        {
                            <span class="badge ta-badge font-weight-normal" data-bs-toggle="tooltip" title="@T["Editor"]"><i class="fa fa-edit text-info" aria-hidden="true"></i> @partDefinition.Editor()</span>
                        }
                    </div>
                    <input type="hidden" asp-for="OrderedPartNames" value="@partDefinition.Name" />
                </li>
            }
        </ul>
    </div>

    <div class="mb-3">
        <a asp-route-action="AddPartsTo" asp-route-id="@Model.TypeDefinition.Name" class="btn btn-info btn-sm" role="button">@T["Add Parts"]</a>
        <a asp-route-action="AddReusablePartTo" asp-route-id="@Model.TypeDefinition.Name" class="btn btn-info btn-sm" role="button">@T["Add Named Part"]</a>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary save" type="submit" name="submit.Save" value="Save">@T["Save"]</button>
        <button class="btn btn-danger delete" type="submit" name="submit.Delete" value="Delete" data-url-af="RemoveUrl">@T["Delete"]</button>
    </div>
</form>

<script at="Foot">
    $(function () {
        Sortable.create(document.getElementById("fields"));
        Sortable.create(document.getElementById("parts"));
    })
</script>
