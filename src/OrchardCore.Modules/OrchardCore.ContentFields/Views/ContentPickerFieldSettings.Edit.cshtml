@model OrchardCore.ContentFields.Settings.ContentPickerFieldSettingsViewModel
@using OrchardCore.ContentManagement

<div class="mb-3">
    <div class="form-check">
        <input asp-for="Required" type="checkbox" class="form-check-input">
        <label class="form-check-label" asp-for="Required">@T["Required"]</label>
        <span class="hint dashed">@T["Whether to ensure at least one element is selected."]</span>
    </div>
</div>

<div class="mb-3">
    <div class="form-check">
        <input asp-for="Multiple" type="checkbox" class="form-check-input">
        <label class="form-check-label" asp-for="Multiple">@T["Allow multiple"]</label>
        <span class="hint dashed">@T["Whether to allow multiple elements to be selected."]</span>
    </div>
</div>

<div class="mb-3">
    <label asp-for="Source">@T["Contained Content Types"]</label>
    <div class="w-sm-50" id="@Html.IdFor(x => x.Source)">
        <div class="form-check">
            <input class="form-check-input" type="radio" asp-for="Source" id="SourceAll" value="@ContentPickerSettingType.AllTypes" checked="@(Model.Source == ContentPickerSettingType.AllTypes)">
            <label for="SourceAll">
                @T["Display All Content Types"]
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" asp-for="Source" id="SourceContentTypes" value="@ContentPickerSettingType.ContentTypes" checked="@(Model.Source == ContentPickerSettingType.ContentTypes)">
            <label for="SourceContentTypes">
                @T["Content Types"]
            </label>
        </div>
        <div class="form-check">
            <input class="form-check-input" type="radio" asp-for="Source" id="SourceStereotypes" value="@ContentPickerSettingType.Stereotypes" checked="@(Model.Source == ContentPickerSettingType.Stereotypes)">
            <label for="SourceStereotypes">
                @T["Stereotype"] <span class="hint">@T["All content types of these Stereotypes"]</span>
            </label>
        </div>
    </div>
</div>

<div class="mb-3" id="StereotypesContainer">
    <div class="w-sm-50" id="@Html.IdFor(x => x.Source)">
        <label asp-for="Stereotypes">@T["Stereotypes"]</label>
        <input asp-for="Stereotypes" class="form-control medium" />
        <span class="hint">@T["The Stereotypes of the content types that this field can contain. You may define multiple Stereotypes using the comma (,) as a separator"]</span>
    </div>
</div>

<div class="mb-3" id="ContentTypesContainer">
    <label asp-for="DisplayedContentTypes">@T["Content Types"]</label>
    <span class="hint">@T["The content types to display. Choose at least one."]</span>
    @await Component.InvokeAsync("SelectContentTypes", new { selectedContentTypes = Model.DisplayedContentTypes, htmlName = Html.NameFor(m => m.DisplayedContentTypes) })
</div>

<div class="mb-3">
    <div class="w-md-75 w-xl-50 pe-md-3">
        <label asp-for="Hint">@T["Hint"]</label>
        <textarea asp-for="Hint" rows="2" class="form-control"></textarea>
    </div>
    <span class="hint">@T["The hint text to display for this field on the editor."]</span>
</div>

<script at="Foot">
    document.addEventListener('DOMContentLoaded', function() {
        var sources = document.getElementsByName('@Html.NameFor(x => x.Source)');
        var contentTypesContainer = document.getElementById('ContentTypesContainer');
        var stereotypeContainer = document.getElementById('StereotypesContainer');
        for (var i = 0; i < sources.length; i++) {
            var source = sources[i];
            source.addEventListener('change', function(src) {
                if (!src.target.checked) {
                    return;
                }
                if (src.target.value == '@(ContentPickerSettingType.Stereotypes)') {
                    contentTypesContainer.classList.add('d-none');
                    stereotypeContainer.classList.remove('d-none');
                } else if (src.target.value == '@(ContentPickerSettingType.ContentTypes)') {
                    contentTypesContainer.classList.remove('d-none');
                    stereotypeContainer.classList.add('d-none');
                } else {
                    contentTypesContainer.classList.add('d-none');
                    stereotypeContainer.classList.add('d-none');
                }
            });
            source.dispatchEvent(new Event('change'));
        }
    });
</script>
