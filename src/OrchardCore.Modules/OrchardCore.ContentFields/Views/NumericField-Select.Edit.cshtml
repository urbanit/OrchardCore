@model OrchardCore.ContentFields.ViewModels.EditNumericFieldViewModel
@using OrchardCore.Mvc.Utilities
@{
    var settings = Model.PartFieldDefinition.GetSettings<NumericFieldSettings>();
    string name = Model.PartFieldDefinition.DisplayName();
    decimal step = (decimal)Math.Pow(10, 0 - settings.Scale);
    decimal from = settings.Minimum.HasValue ? settings.Minimum.Value : 0;
    decimal to = settings.Maximum.HasValue ? settings.Maximum.Value : 10;
    var uniqueName = $"{Model.PartFieldDefinition.PartDefinition.Name}-{Model.PartFieldDefinition.Name}";
}

<div class="@Orchard.GetWrapperCssClasses("field-wrapper", $"field-wrapper-{uniqueName.HtmlClassify()}")" id="@Html.IdFor(x => x.Value)_FieldWrapper">
    <label asp-for="Value" class="@Orchard.GetLabelCssClasses()">@name</label>
    <div class="@Orchard.GetEndCssClasses()">

        <select asp-for="Value" class="form-select content-preview-select">
            @if (!settings.Required)
            {
                <option value="">@T["None"]</option>
            }
            @for (decimal d = from; d <= to; d += step)
            {
                <option value="@d">@d</option>
            }
        </select>

        @if (!String.IsNullOrEmpty(settings.Hint))
        {
            <span class="hint">@settings.Hint</span>
        }
    </div>
</div>
