@model OrchardCore.ContentFields.ViewModels.EditNumericFieldViewModel
@using System.Globalization
@using OrchardCore.Mvc.Utilities
@{
    var settings = Model.PartFieldDefinition.GetSettings<NumericFieldSettings>();
    string name = Model.PartFieldDefinition.DisplayName();
    string step = Math.Pow(10, 0 - settings.Scale).ToString(CultureInfo.InvariantCulture);
    decimal min = settings.Minimum.HasValue ? settings.Minimum.Value : 0;
    decimal max = settings.Maximum.HasValue ? settings.Maximum.Value : 10000;
    string id = Html.IdFor(m => m.Value);
    string javascriptDecimalSeparator = CultureInfo.InvariantCulture.NumberFormat.NumberDecimalSeparator;
    string serverDecimalSeparator = CultureInfo.CurrentUICulture.NumberFormat.NumberDecimalSeparator;
    var uniqueName = $"{Model.PartFieldDefinition.PartDefinition.Name}-{Model.PartFieldDefinition.Name}";
}

<div class="@Orchard.GetWrapperCssClasses("field-wrapper", $"field-wrapper-{uniqueName.HtmlClassify()}")" id="@Html.IdFor(x => x.Value)_FieldWrapper">
    <label asp-for="Value" class="@Orchard.GetLabelCssClasses()">@name</label>
    <div class="@Orchard.GetEndCssClasses()">
        <div class="@Orchard.GetLimitedWidthWrapperCssClasses()">
            <div class="@Orchard.GetLimitedWidthCssClasses()">
                <div class="input-group mb-2">
                    @if (settings.Minimum.HasValue)
                    {
                        <span class="input-group-text">@min</span>
                    }
                    <input asp-for="Value" class="form-control content-preview-select" placeholder="@settings.Placeholder" required="@settings.Required" onchange="numericFieldRangeSync('@(id)-range', value);" />
                    @if (settings.Maximum.HasValue)
                    {
                        <span class="input-group-text">@max</span>
                    }
                </div>
                <input id="@(id)-range" class="form-control-range" type="range" min="@min" max="@max" step="@step" oninput="numericFieldRange('@(id)', value);" onchange="numericFieldRange('@(id)', value);" />
            </div>
        </div>
        @if (!String.IsNullOrEmpty(settings.Hint))
        {
            <span class="hint">@settings.Hint</span>
        }
    </div>
</div>

<script asp-name="numericFieldRange" at="Foot">
    function numericFieldRange(id, value) {
        @if (javascriptDecimalSeparator != serverDecimalSeparator)
        {
        <text>value = value.replace('@(javascriptDecimalSeparator)', '@(serverDecimalSeparator)'); </text>
        }
        $('#' + id).val(value);
    }

    function numericFieldRangeSync(id, value) {
        @if (javascriptDecimalSeparator != serverDecimalSeparator)
        {
        <text>value = value.replace('@(serverDecimalSeparator)', '@(javascriptDecimalSeparator)'); </text>
        }
        value = (Number(value) || 0);
        $('#' + id).val(value);
    }
</script>
