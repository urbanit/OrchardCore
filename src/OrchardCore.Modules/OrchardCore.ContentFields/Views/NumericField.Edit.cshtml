@model OrchardCore.ContentFields.ViewModels.EditNumericFieldViewModel
@using OrchardCore.Mvc.Utilities
@{
    var settings = Model.PartFieldDefinition.GetSettings<NumericFieldSettings>();
    string name = Model.PartFieldDefinition.DisplayName();
    decimal min = settings.Minimum.HasValue ? settings.Minimum.Value : 0;
    decimal max = settings.Maximum.HasValue ? settings.Maximum.Value : 10000;
    var uniqueName = $"{Model.PartFieldDefinition.PartDefinition.Name}-{Model.PartFieldDefinition.Name}";
}

<div class="@Orchard.GetWrapperCssClasses("field-wrapper", $"field-wrapper-{uniqueName.HtmlClassify()}")" id="@Html.IdFor(x => x.Value)_FieldWrapper">
    <label asp-for="Value" class="@Orchard.GetLabelCssClasses()">@name</label>
    <div class="@Orchard.GetEndCssClasses()">
        <div class="@Orchard.GetLimitedWidthWrapperCssClasses()">
            <div class="@Orchard.GetLimitedWidthCssClasses()">
                <div class="input-group">
                    @if (settings.Minimum.HasValue)
                    {
                        <span class="input-group-text">@min</span>
                    }
                    <input asp-for="Value" class="form-control content-preview-select" placeholder="@settings.Placeholder" required="@settings.Required" />
                    @if (settings.Maximum.HasValue)
                    {
                        <span class="input-group-text">@max</span>
                    }
                </div>
            </div>
        </div>
        @if (!String.IsNullOrEmpty(settings.Hint))
        {
            <span class="hint">@settings.Hint</span>
        }
    </div>
</div>
