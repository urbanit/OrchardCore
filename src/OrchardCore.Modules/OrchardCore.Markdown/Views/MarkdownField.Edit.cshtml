@model OrchardCore.Markdown.ViewModels.EditMarkdownFieldViewModel
@using OrchardCore.ContentLocalization
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.Markdown.Settings
@using OrchardCore.Mvc.Utilities
@using OrchardCore
@{
    var settings = Model.PartFieldDefinition.GetSettings<MarkdownFieldSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.Field.ContentItem);
    var uniqueName = $"{Model.PartFieldDefinition.PartDefinition.Name}-{Model.PartFieldDefinition.Name}";
}

<div class="@Orchard.GetWrapperCssClasses("field-wrapper", $"field-wrapper-{uniqueName.HtmlClassify()}")" id="@Html.IdFor(x => x.Markdown)_FieldWrapper">
    <label asp-for="Markdown" class="@Orchard.GetLabelCssClasses()">@Model.PartFieldDefinition.DisplayName()</label>
    <div class="@Orchard.GetEndCssClasses()">
        @await DisplayAsync(await New.ShortcodeModal())
        <input asp-for="Markdown" class="form-control content-preview-text shortcode-modal-input" dir="@culture.GetLanguageDirection()" />
        @if (!String.IsNullOrEmpty(settings.Hint))
        {
            <span class="hint">@settings.Hint</span>
        }
    </div>
</div>
