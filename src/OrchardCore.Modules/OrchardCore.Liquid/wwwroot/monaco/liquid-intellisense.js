/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

var liquidTags = ['if', 'else', 'elseif', 'endif', 'render', 'assign', 'capture', 'endcapture', 'case', 'endcase', 'comment', 'endcomment', 'cycle', 'decrement', 'for', 'endfor', 'include', 'increment', 'layout', 'raw', 'endraw', 'render', 'tablerow', 'endtablerow', 'unless', 'endunless'];
var liquidFilters = ['abs', 'append', 'at_least', 'at_most', 'capitalize', 'ceil', 'compact', 'date', 'default', 'divided_by', 'downcase', 'escape', 'escape_once', 'first', 'floor', 'join', 'json', 'last', 'lstrip', 'map', 'minus', 'modulo', 'newline_to_br', 'plus', 'prepend', 'remove', 'remove_first', 'replace', 'replace_first', 'reverse', 'round', 'rstrip', 'size', 'slice', 'sort', 'sort_natural', 'split', 'strip', 'strip_html', 'strip_newlines', 'times', 'truncate', 'truncatewords', 'uniq', 'upcase', 'url_decode', 'url_encode', 'where'];

function getLiquidContextInfo(model, position, triggerCharacter) {
  var inTag;
  var inObject;
  var showTags;
  var showFilters;
  var findStart = model.findPreviousMatch('\\{(%|\\{)', position, true, false, null, true);

  if (findStart && findStart.matches && !position.isBefore(findStart.range.getEndPosition())) {
    if (findStart.matches[1] == '%') {
      inTag = true;
    } else if (findStart.matches[1] == '{') {
      inObject = true;
    }

    var searchPattern = inTag ? '%}' : '}}';
    var findEnd = model.findNextMatch(searchPattern, position, false, false, null, true);
    var currentRange = findStart.range.plusRange(findEnd.range);

    if (currentRange.containsPosition(position)) {
      if (inTag) {
        var findTagName = model.findNextMatch('\\{%\\s*([a-zA-Z-_]+)', findStart.range.getStartPosition(), true, false, null, true);

        if (findTagName && currentRange.containsRange(findTagName.range) && findTagName.matches.length > 1) {
          if (findTagName.matches[1] == 'assign') {
            showFilters = true;
          } else {
            showTags = false;
          }
        } else {
          showTags = true;
        }
      } else {
        showFilters = true;
      }
    }
  }

  return {
    showFilters: showFilters,
    showTags: showTags,
    inTag: inTag,
    inObject: inObject
  };
}

var completionItemProvider = {
  triggerCharacters: [' '],
  provideCompletionItems: function provideCompletionItems(model, position, context, token) {
    var items = [];

    if (context.triggerCharacter == ' ') {
      var startTrigger = model.getValueInRange(new monaco.Range(position.lineNumber, position.column - 3, position.lineNumber, position.column - 1));

      if (startTrigger != '{%' && !startTrigger.endsWith('|')) {
        return null;
      }
    }

    var liquidContext = getLiquidContextInfo(model, position, context.triggerCharacter);

    if (liquidContext.showFilters) {
      items = liquidFilters;
    } else if (liquidContext.showTags) {
      items = liquidTags.filter(function (value) {
        return !value.startsWith('end');
      });
    }

    var suggestions = items.map(function (value) {
      return {
        label: value,
        kind: monaco.languages.CompletionItemKind.Keyword,
        insertText: value,
        insertTextRules: monaco.languages.CompletionItemInsertTextRule.KeepWhitespace
      };
    });
    return {
      suggestions: suggestions
    };
  }
};

function ConfigureLiquidIntellisense(monaco, suggestHtml) {
  if (suggestHtml === void 0) {
    suggestHtml = true;
  }

  if (suggestHtml) {
    var modeConfiguration = {
      completionItems: true,
      colors: true,
      foldingRanges: true,
      selectionRanges: true,
      diagnostics: false,
      documentFormattingEdits: true,
      documentRangeFormattingEdits: true
    };
    var options = {
      format: monaco.languages.html.htmlDefaults.options.format,
      suggest: {
        html5: true
      }
    };
    monaco.languages.html.registerHTMLLanguageService('liquid', options, modeConfiguration);
  }

  monaco.languages.registerCompletionItemProvider('liquid', completionItemProvider);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpcXVpZC1pbnRlbGxpc2Vuc2UudHMiXSwibmFtZXMiOlsibGlxdWlkVGFncyIsImxpcXVpZEZpbHRlcnMiLCJnZXRMaXF1aWRDb250ZXh0SW5mbyIsIm1vZGVsIiwicG9zaXRpb24iLCJ0cmlnZ2VyQ2hhcmFjdGVyIiwiaW5UYWciLCJpbk9iamVjdCIsInNob3dUYWdzIiwic2hvd0ZpbHRlcnMiLCJmaW5kU3RhcnQiLCJmaW5kUHJldmlvdXNNYXRjaCIsIm1hdGNoZXMiLCJpc0JlZm9yZSIsInJhbmdlIiwiZ2V0RW5kUG9zaXRpb24iLCJzZWFyY2hQYXR0ZXJuIiwiZmluZEVuZCIsImZpbmROZXh0TWF0Y2giLCJjdXJyZW50UmFuZ2UiLCJwbHVzUmFuZ2UiLCJjb250YWluc1Bvc2l0aW9uIiwiZmluZFRhZ05hbWUiLCJnZXRTdGFydFBvc2l0aW9uIiwiY29udGFpbnNSYW5nZSIsImxlbmd0aCIsImNvbXBsZXRpb25JdGVtUHJvdmlkZXIiLCJ0cmlnZ2VyQ2hhcmFjdGVycyIsInByb3ZpZGVDb21wbGV0aW9uSXRlbXMiLCJjb250ZXh0IiwidG9rZW4iLCJpdGVtcyIsInN0YXJ0VHJpZ2dlciIsImdldFZhbHVlSW5SYW5nZSIsIm1vbmFjbyIsIlJhbmdlIiwibGluZU51bWJlciIsImNvbHVtbiIsImVuZHNXaXRoIiwibGlxdWlkQ29udGV4dCIsImZpbHRlciIsInZhbHVlIiwic3RhcnRzV2l0aCIsInN1Z2dlc3Rpb25zIiwibWFwIiwibGFiZWwiLCJraW5kIiwibGFuZ3VhZ2VzIiwiQ29tcGxldGlvbkl0ZW1LaW5kIiwiS2V5d29yZCIsImluc2VydFRleHQiLCJpbnNlcnRUZXh0UnVsZXMiLCJDb21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlIiwiS2VlcFdoaXRlc3BhY2UiLCJDb25maWd1cmVMaXF1aWRJbnRlbGxpc2Vuc2UiLCJzdWdnZXN0SHRtbCIsIm1vZGVDb25maWd1cmF0aW9uIiwiY29tcGxldGlvbkl0ZW1zIiwiY29sb3JzIiwiZm9sZGluZ1JhbmdlcyIsInNlbGVjdGlvblJhbmdlcyIsImRpYWdub3N0aWNzIiwiZG9jdW1lbnRGb3JtYXR0aW5nRWRpdHMiLCJkb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzIiwib3B0aW9ucyIsImZvcm1hdCIsImh0bWwiLCJodG1sRGVmYXVsdHMiLCJzdWdnZXN0IiwiaHRtbDUiLCJyZWdpc3RlckhUTUxMYW5ndWFnZVNlcnZpY2UiLCJyZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsSUFBTUEsVUFBVSxHQUFHLENBQ2YsSUFEZSxFQUVmLE1BRmUsRUFHZixRQUhlLEVBSWYsT0FKZSxFQUtmLFFBTGUsRUFNZixRQU5lLEVBT2YsU0FQZSxFQVFmLFlBUmUsRUFTZixNQVRlLEVBVWYsU0FWZSxFQVdmLFNBWGUsRUFZZixZQVplLEVBYWYsT0FiZSxFQWNmLFdBZGUsRUFlZixLQWZlLEVBZ0JmLFFBaEJlLEVBaUJmLFNBakJlLEVBa0JmLFdBbEJlLEVBbUJmLFFBbkJlLEVBb0JmLEtBcEJlLEVBcUJmLFFBckJlLEVBc0JmLFFBdEJlLEVBdUJmLFVBdkJlLEVBd0JmLGFBeEJlLEVBeUJmLFFBekJlLEVBMEJmLFdBMUJlLENBQW5CO0FBNkJBLElBQU1DLGFBQWEsR0FBRyxDQUNsQixLQURrQixFQUVsQixRQUZrQixFQUdsQixVQUhrQixFQUlsQixTQUprQixFQUtsQixZQUxrQixFQU1sQixNQU5rQixFQU9sQixTQVBrQixFQVFsQixNQVJrQixFQVNsQixTQVRrQixFQVVsQixZQVZrQixFQVdsQixVQVhrQixFQVlsQixRQVprQixFQWFsQixhQWJrQixFQWNsQixPQWRrQixFQWVsQixPQWZrQixFQWdCbEIsTUFoQmtCLEVBaUJsQixNQWpCa0IsRUFrQmxCLE1BbEJrQixFQW1CbEIsUUFuQmtCLEVBb0JsQixLQXBCa0IsRUFxQmxCLE9BckJrQixFQXNCbEIsUUF0QmtCLEVBdUJsQixlQXZCa0IsRUF3QmxCLE1BeEJrQixFQXlCbEIsU0F6QmtCLEVBMEJsQixRQTFCa0IsRUEyQmxCLGNBM0JrQixFQTRCbEIsU0E1QmtCLEVBNkJsQixlQTdCa0IsRUE4QmxCLFNBOUJrQixFQStCbEIsT0EvQmtCLEVBZ0NsQixRQWhDa0IsRUFpQ2xCLE1BakNrQixFQWtDbEIsT0FsQ2tCLEVBbUNsQixNQW5Da0IsRUFvQ2xCLGNBcENrQixFQXFDbEIsT0FyQ2tCLEVBc0NsQixPQXRDa0IsRUF1Q2xCLFlBdkNrQixFQXdDbEIsZ0JBeENrQixFQXlDbEIsT0F6Q2tCLEVBMENsQixVQTFDa0IsRUEyQ2xCLGVBM0NrQixFQTRDbEIsTUE1Q2tCLEVBNkNsQixRQTdDa0IsRUE4Q2xCLFlBOUNrQixFQStDbEIsWUEvQ2tCLEVBZ0RsQixPQWhEa0IsQ0FBdEI7O0FBMkRBLFNBQVNDLG9CQUFULENBQThCQyxLQUE5QixFQUErREMsUUFBL0QsRUFBMEZDLGdCQUExRixFQUFrSDtBQUM5RyxNQUFJQyxLQUFKO0FBQ0EsTUFBSUMsUUFBSjtBQUNBLE1BQUlDLFFBQUo7QUFDQSxNQUFJQyxXQUFKO0FBRUEsTUFBSUMsU0FBUyxHQUFHUCxLQUFLLENBQUNRLGlCQUFOLENBQXdCLFlBQXhCLEVBQXNDUCxRQUF0QyxFQUFnRCxJQUFoRCxFQUFzRCxLQUF0RCxFQUE2RCxJQUE3RCxFQUFtRSxJQUFuRSxDQUFoQjs7QUFDQSxNQUFJTSxTQUFTLElBQUlBLFNBQVMsQ0FBQ0UsT0FBdkIsSUFBa0MsQ0FBQ1IsUUFBUSxDQUFDUyxRQUFULENBQWtCSCxTQUFTLENBQUNJLEtBQVYsQ0FBZ0JDLGNBQWhCLEVBQWxCLENBQXZDLEVBQTRGO0FBQ3hGLFFBQUlMLFNBQVMsQ0FBQ0UsT0FBVixDQUFrQixDQUFsQixLQUF3QixHQUE1QixFQUFpQztBQUM3Qk4sTUFBQUEsS0FBSyxHQUFHLElBQVI7QUFDSCxLQUZELE1BRU8sSUFBSUksU0FBUyxDQUFDRSxPQUFWLENBQWtCLENBQWxCLEtBQXdCLEdBQTVCLEVBQWlDO0FBQ3BDTCxNQUFBQSxRQUFRLEdBQUcsSUFBWDtBQUNIOztBQUVELFFBQUlTLGFBQWEsR0FBR1YsS0FBSyxHQUFHLElBQUgsR0FBVSxJQUFuQztBQUNBLFFBQUlXLE9BQU8sR0FBR2QsS0FBSyxDQUFDZSxhQUFOLENBQW9CRixhQUFwQixFQUFtQ1osUUFBbkMsRUFBNkMsS0FBN0MsRUFBb0QsS0FBcEQsRUFBMkQsSUFBM0QsRUFBaUUsSUFBakUsQ0FBZDtBQUNBLFFBQUllLFlBQVksR0FBR1QsU0FBUyxDQUFDSSxLQUFWLENBQWdCTSxTQUFoQixDQUEwQkgsT0FBTyxDQUFDSCxLQUFsQyxDQUFuQjs7QUFDQSxRQUFJSyxZQUFZLENBQUNFLGdCQUFiLENBQThCakIsUUFBOUIsQ0FBSixFQUE2QztBQUN6QyxVQUFJRSxLQUFKLEVBQVc7QUFDUCxZQUFJZ0IsV0FBVyxHQUFHbkIsS0FBSyxDQUFDZSxhQUFOLENBQW9CLHVCQUFwQixFQUE2Q1IsU0FBUyxDQUFDSSxLQUFWLENBQWdCUyxnQkFBaEIsRUFBN0MsRUFBaUYsSUFBakYsRUFBdUYsS0FBdkYsRUFBOEYsSUFBOUYsRUFBb0csSUFBcEcsQ0FBbEI7O0FBQ0EsWUFBSUQsV0FBVyxJQUFJSCxZQUFZLENBQUNLLGFBQWIsQ0FBMkJGLFdBQVcsQ0FBQ1IsS0FBdkMsQ0FBZixJQUFnRVEsV0FBVyxDQUFDVixPQUFaLENBQW9CYSxNQUFwQixHQUE2QixDQUFqRyxFQUFvRztBQUNoRyxjQUFJSCxXQUFXLENBQUNWLE9BQVosQ0FBb0IsQ0FBcEIsS0FBMEIsUUFBOUIsRUFBd0M7QUFDcENILFlBQUFBLFdBQVcsR0FBRyxJQUFkO0FBQ0gsV0FGRCxNQUVPO0FBQ0hELFlBQUFBLFFBQVEsR0FBRyxLQUFYO0FBQ0g7QUFDSixTQU5ELE1BTU87QUFDSEEsVUFBQUEsUUFBUSxHQUFHLElBQVg7QUFDSDtBQUNKLE9BWEQsTUFXTztBQUNIQyxRQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxTQUFPO0FBQ0hBLElBQUFBLFdBQVcsRUFBQUEsV0FEUjtBQUVIRCxJQUFBQSxRQUFRLEVBQUFBLFFBRkw7QUFHSEYsSUFBQUEsS0FBSyxFQUFBQSxLQUhGO0FBSUhDLElBQUFBLFFBQVEsRUFBQUE7QUFKTCxHQUFQO0FBTUg7O0FBRUQsSUFBTW1CLHNCQUFzQixHQUE0QztBQUNwRUMsRUFBQUEsaUJBQWlCLEVBQUUsQ0FBQyxHQUFELENBRGlEO0FBRXBFQyxFQUFBQSxzQkFBc0IsRUFBRSxnQ0FBQ3pCLEtBQUQsRUFBa0NDLFFBQWxDLEVBQTZEeUIsT0FBN0QsRUFBMEdDLEtBQTFHLEVBQXlJO0FBQzdKLFFBQUlDLEtBQUssR0FBYSxFQUF0Qjs7QUFFQSxRQUFJRixPQUFPLENBQUN4QixnQkFBUixJQUE0QixHQUFoQyxFQUFxQztBQUNqQyxVQUFJMkIsWUFBWSxHQUFHN0IsS0FBSyxDQUFDOEIsZUFBTixDQUFzQixJQUFJQyxNQUFNLENBQUNDLEtBQVgsQ0FBaUIvQixRQUFRLENBQUNnQyxVQUExQixFQUFzQ2hDLFFBQVEsQ0FBQ2lDLE1BQVQsR0FBa0IsQ0FBeEQsRUFBMkRqQyxRQUFRLENBQUNnQyxVQUFwRSxFQUFnRmhDLFFBQVEsQ0FBQ2lDLE1BQVQsR0FBa0IsQ0FBbEcsQ0FBdEIsQ0FBbkI7O0FBQ0EsVUFBSUwsWUFBWSxJQUFJLElBQWhCLElBQXdCLENBQUNBLFlBQVksQ0FBQ00sUUFBYixDQUFzQixHQUF0QixDQUE3QixFQUF5RDtBQUNyRCxlQUFPLElBQVA7QUFDSDtBQUNKOztBQUVELFFBQUlDLGFBQWEsR0FBdUJyQyxvQkFBb0IsQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLEVBQWtCeUIsT0FBTyxDQUFDeEIsZ0JBQTFCLENBQTVEOztBQUNBLFFBQUlrQyxhQUFhLENBQUM5QixXQUFsQixFQUErQjtBQUMzQnNCLE1BQUFBLEtBQUssR0FBRzlCLGFBQVI7QUFDSCxLQUZELE1BRU8sSUFBSXNDLGFBQWEsQ0FBQy9CLFFBQWxCLEVBQTRCO0FBQy9CdUIsTUFBQUEsS0FBSyxHQUFHL0IsVUFBVSxDQUFDd0MsTUFBWCxDQUFrQixVQUFDQyxLQUFELEVBQWM7QUFBTyxlQUFPLENBQUNBLEtBQUssQ0FBQ0MsVUFBTixDQUFpQixLQUFqQixDQUFSO0FBQWlDLE9BQXhFLENBQVI7QUFDSDs7QUFFRCxRQUFNQyxXQUFXLEdBQUdaLEtBQUssQ0FBQ2EsR0FBTixDQUFVLFVBQUNILEtBQUQsRUFBYztBQUN4QyxhQUFPO0FBQ0hJLFFBQUFBLEtBQUssRUFBRUosS0FESjtBQUVISyxRQUFBQSxJQUFJLEVBQUVaLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQkMsa0JBQWpCLENBQW9DQyxPQUZ2QztBQUdIQyxRQUFBQSxVQUFVLEVBQUVULEtBSFQ7QUFJSFUsUUFBQUEsZUFBZSxFQUFFakIsTUFBTSxDQUFDYSxTQUFQLENBQWlCSyw0QkFBakIsQ0FBOENDO0FBSjVELE9BQVA7QUFNSCxLQVBtQixDQUFwQjtBQVNBLFdBQU87QUFBRVYsTUFBQUEsV0FBVyxFQUFBQTtBQUFiLEtBQVA7QUFDSDtBQTdCbUUsQ0FBeEU7O0FBZ0NBLFNBQVNXLDJCQUFULENBQXFDcEIsTUFBckMsRUFBa0RxQixXQUFsRCxFQUE2RTtBQUEzQixNQUFBQSxXQUFBLEtBQUEsS0FBQSxDQUFBLEVBQUE7QUFBQUEsSUFBQUEsV0FBQSxHQUFBLElBQUE7QUFBMkI7O0FBQ3pFLE1BQUlBLFdBQUosRUFBaUI7QUFDYixRQUFJQyxpQkFBaUIsR0FBNEM7QUFDN0RDLE1BQUFBLGVBQWUsRUFBRSxJQUQ0QztBQUU3REMsTUFBQUEsTUFBTSxFQUFFLElBRnFEO0FBRzdEQyxNQUFBQSxhQUFhLEVBQUUsSUFIOEM7QUFJN0RDLE1BQUFBLGVBQWUsRUFBRSxJQUo0QztBQUs3REMsTUFBQUEsV0FBVyxFQUFFLEtBTGdEO0FBTTdEQyxNQUFBQSx1QkFBdUIsRUFBRSxJQU5vQztBQU83REMsTUFBQUEsNEJBQTRCLEVBQUU7QUFQK0IsS0FBakU7QUFTQSxRQUFJQyxPQUFPLEdBQWtDO0FBQ3pDQyxNQUFBQSxNQUFNLEVBQUUvQixNQUFNLENBQUNhLFNBQVAsQ0FBaUJtQixJQUFqQixDQUFzQkMsWUFBdEIsQ0FBbUNILE9BQW5DLENBQTJDQyxNQURWO0FBRXpDRyxNQUFBQSxPQUFPLEVBQUU7QUFBRUMsUUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFGZ0MsS0FBN0M7QUFJQW5DLElBQUFBLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQm1CLElBQWpCLENBQXNCSSwyQkFBdEIsQ0FBa0QsUUFBbEQsRUFBNEROLE9BQTVELEVBQXFFUixpQkFBckU7QUFDSDs7QUFFRHRCLEVBQUFBLE1BQU0sQ0FBQ2EsU0FBUCxDQUFpQndCLDhCQUFqQixDQUFnRCxRQUFoRCxFQUEwRDdDLHNCQUExRDtBQUNIIiwiZmlsZSI6ImxpcXVpZC1pbnRlbGxpc2Vuc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvbW9uYWNvLmQudHNcIiAvPlxyXG5cclxuY29uc3QgbGlxdWlkVGFncyA9IFtcclxuICAgICdpZicsXHJcbiAgICAnZWxzZScsXHJcbiAgICAnZWxzZWlmJyxcclxuICAgICdlbmRpZicsXHJcbiAgICAncmVuZGVyJyxcclxuICAgICdhc3NpZ24nLFxyXG4gICAgJ2NhcHR1cmUnLFxyXG4gICAgJ2VuZGNhcHR1cmUnLFxyXG4gICAgJ2Nhc2UnLFxyXG4gICAgJ2VuZGNhc2UnLFxyXG4gICAgJ2NvbW1lbnQnLFxyXG4gICAgJ2VuZGNvbW1lbnQnLFxyXG4gICAgJ2N5Y2xlJyxcclxuICAgICdkZWNyZW1lbnQnLFxyXG4gICAgJ2ZvcicsXHJcbiAgICAnZW5kZm9yJyxcclxuICAgICdpbmNsdWRlJyxcclxuICAgICdpbmNyZW1lbnQnLFxyXG4gICAgJ2xheW91dCcsXHJcbiAgICAncmF3JyxcclxuICAgICdlbmRyYXcnLFxyXG4gICAgJ3JlbmRlcicsXHJcbiAgICAndGFibGVyb3cnLFxyXG4gICAgJ2VuZHRhYmxlcm93JyxcclxuICAgICd1bmxlc3MnLFxyXG4gICAgJ2VuZHVubGVzcydcclxuXTtcclxuXHJcbmNvbnN0IGxpcXVpZEZpbHRlcnMgPSBbXHJcbiAgICAnYWJzJyxcclxuICAgICdhcHBlbmQnLFxyXG4gICAgJ2F0X2xlYXN0JyxcclxuICAgICdhdF9tb3N0JyxcclxuICAgICdjYXBpdGFsaXplJyxcclxuICAgICdjZWlsJyxcclxuICAgICdjb21wYWN0JyxcclxuICAgICdkYXRlJyxcclxuICAgICdkZWZhdWx0JyxcclxuICAgICdkaXZpZGVkX2J5JyxcclxuICAgICdkb3duY2FzZScsXHJcbiAgICAnZXNjYXBlJyxcclxuICAgICdlc2NhcGVfb25jZScsXHJcbiAgICAnZmlyc3QnLFxyXG4gICAgJ2Zsb29yJyxcclxuICAgICdqb2luJyxcclxuICAgICdqc29uJyxcclxuICAgICdsYXN0JyxcclxuICAgICdsc3RyaXAnLFxyXG4gICAgJ21hcCcsXHJcbiAgICAnbWludXMnLFxyXG4gICAgJ21vZHVsbycsXHJcbiAgICAnbmV3bGluZV90b19icicsXHJcbiAgICAncGx1cycsXHJcbiAgICAncHJlcGVuZCcsXHJcbiAgICAncmVtb3ZlJyxcclxuICAgICdyZW1vdmVfZmlyc3QnLFxyXG4gICAgJ3JlcGxhY2UnLFxyXG4gICAgJ3JlcGxhY2VfZmlyc3QnLFxyXG4gICAgJ3JldmVyc2UnLFxyXG4gICAgJ3JvdW5kJyxcclxuICAgICdyc3RyaXAnLFxyXG4gICAgJ3NpemUnLFxyXG4gICAgJ3NsaWNlJyxcclxuICAgICdzb3J0JyxcclxuICAgICdzb3J0X25hdHVyYWwnLFxyXG4gICAgJ3NwbGl0JyxcclxuICAgICdzdHJpcCcsXHJcbiAgICAnc3RyaXBfaHRtbCcsXHJcbiAgICAnc3RyaXBfbmV3bGluZXMnLFxyXG4gICAgJ3RpbWVzJyxcclxuICAgICd0cnVuY2F0ZScsXHJcbiAgICAndHJ1bmNhdGV3b3JkcycsXHJcbiAgICAndW5pcScsXHJcbiAgICAndXBjYXNlJyxcclxuICAgICd1cmxfZGVjb2RlJyxcclxuICAgICd1cmxfZW5jb2RlJyxcclxuICAgICd3aGVyZSdcclxuXVxyXG5cclxuaW50ZXJmYWNlIElMaXF1aWRDb250ZXh0SW5mbyB7XHJcbiAgICBzaG93RmlsdGVyczogYm9vbGVhbixcclxuICAgIHNob3dUYWdzOiBib29sZWFuLFxyXG4gICAgaW5jbHVkZUVuZFRhZ3M6IGJvb2xlYW4sXHJcbiAgICBpblRhZzogYm9vbGVhbixcclxuICAgIGluT2JqZWN0OiBib29sZWFuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExpcXVpZENvbnRleHRJbmZvKG1vZGVsOiBtb25hY28uZWRpdG9yLklUZXh0TW9kZWwsIHBvc2l0aW9uOiBtb25hY28uUG9zaXRpb24sIHRyaWdnZXJDaGFyYWN0ZXI6IHN0cmluZyk6IElMaXF1aWRDb250ZXh0SW5mbyB7XHJcbiAgICB2YXIgaW5UYWc6IGJvb2xlYW47XHJcbiAgICB2YXIgaW5PYmplY3Q6IGJvb2xlYW47XHJcbiAgICB2YXIgc2hvd1RhZ3M6IGJvb2xlYW47XHJcbiAgICB2YXIgc2hvd0ZpbHRlcnM6IGJvb2xlYW47XHJcblxyXG4gICAgdmFyIGZpbmRTdGFydCA9IG1vZGVsLmZpbmRQcmV2aW91c01hdGNoKCdcXFxceyglfFxcXFx7KScsIHBvc2l0aW9uLCB0cnVlLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XHJcbiAgICBpZiAoZmluZFN0YXJ0ICYmIGZpbmRTdGFydC5tYXRjaGVzICYmICFwb3NpdGlvbi5pc0JlZm9yZShmaW5kU3RhcnQucmFuZ2UuZ2V0RW5kUG9zaXRpb24oKSkpIHtcclxuICAgICAgICBpZiAoZmluZFN0YXJ0Lm1hdGNoZXNbMV0gPT0gJyUnKSB7XHJcbiAgICAgICAgICAgIGluVGFnID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGZpbmRTdGFydC5tYXRjaGVzWzFdID09ICd7Jykge1xyXG4gICAgICAgICAgICBpbk9iamVjdCA9IHRydWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWFyY2hQYXR0ZXJuID0gaW5UYWcgPyAnJX0nIDogJ319JztcclxuICAgICAgICB2YXIgZmluZEVuZCA9IG1vZGVsLmZpbmROZXh0TWF0Y2goc2VhcmNoUGF0dGVybiwgcG9zaXRpb24sIGZhbHNlLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRSYW5nZSA9IGZpbmRTdGFydC5yYW5nZS5wbHVzUmFuZ2UoZmluZEVuZC5yYW5nZSk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRSYW5nZS5jb250YWluc1Bvc2l0aW9uKHBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICBpZiAoaW5UYWcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaW5kVGFnTmFtZSA9IG1vZGVsLmZpbmROZXh0TWF0Y2goJ1xcXFx7JVxcXFxzKihbYS16QS1aLV9dKyknLCBmaW5kU3RhcnQucmFuZ2UuZ2V0U3RhcnRQb3NpdGlvbigpLCB0cnVlLCBmYWxzZSwgbnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmluZFRhZ05hbWUgJiYgY3VycmVudFJhbmdlLmNvbnRhaW5zUmFuZ2UoZmluZFRhZ05hbWUucmFuZ2UpICYmIGZpbmRUYWdOYW1lLm1hdGNoZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaW5kVGFnTmFtZS5tYXRjaGVzWzFdID09ICdhc3NpZ24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dGaWx0ZXJzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93VGFncyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd1RhZ3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2hvd0ZpbHRlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2hvd0ZpbHRlcnMsXHJcbiAgICAgICAgc2hvd1RhZ3MsXHJcbiAgICAgICAgaW5UYWcsXHJcbiAgICAgICAgaW5PYmplY3RcclxuICAgIH0gYXMgSUxpcXVpZENvbnRleHRJbmZvO1xyXG59XHJcblxyXG5jb25zdCBjb21wbGV0aW9uSXRlbVByb3ZpZGVyOiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtUHJvdmlkZXIgPSB7XHJcbiAgICB0cmlnZ2VyQ2hhcmFjdGVyczogWycgJ10sXHJcbiAgICBwcm92aWRlQ29tcGxldGlvbkl0ZW1zOiAobW9kZWw6IG1vbmFjby5lZGl0b3IuSVRleHRNb2RlbCwgcG9zaXRpb246IG1vbmFjby5Qb3NpdGlvbiwgY29udGV4dDogbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uQ29udGV4dCwgdG9rZW46IG1vbmFjby5DYW5jZWxsYXRpb25Ub2tlbikgPT4ge1xyXG4gICAgICAgIHZhciBpdGVtczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHQudHJpZ2dlckNoYXJhY3RlciA9PSAnICcpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0VHJpZ2dlciA9IG1vZGVsLmdldFZhbHVlSW5SYW5nZShuZXcgbW9uYWNvLlJhbmdlKHBvc2l0aW9uLmxpbmVOdW1iZXIsIHBvc2l0aW9uLmNvbHVtbiAtIDMsIHBvc2l0aW9uLmxpbmVOdW1iZXIsIHBvc2l0aW9uLmNvbHVtbiAtIDEpKTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0VHJpZ2dlciAhPSAneyUnICYmICFzdGFydFRyaWdnZXIuZW5kc1dpdGgoJ3wnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsaXF1aWRDb250ZXh0OiBJTGlxdWlkQ29udGV4dEluZm8gPSBnZXRMaXF1aWRDb250ZXh0SW5mbyhtb2RlbCwgcG9zaXRpb24sIGNvbnRleHQudHJpZ2dlckNoYXJhY3Rlcik7XHJcbiAgICAgICAgaWYgKGxpcXVpZENvbnRleHQuc2hvd0ZpbHRlcnMpIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBsaXF1aWRGaWx0ZXJzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGlxdWlkQ29udGV4dC5zaG93VGFncykge1xyXG4gICAgICAgICAgICBpdGVtcyA9IGxpcXVpZFRhZ3MuZmlsdGVyKCh2YWx1ZTogc3RyaW5nKSA9PiB7IHJldHVybiAhdmFsdWUuc3RhcnRzV2l0aCgnZW5kJykgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IGl0ZW1zLm1hcCgodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAga2luZDogbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCxcclxuICAgICAgICAgICAgICAgIGluc2VydFRleHQ6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0VGV4dFJ1bGVzOiBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGUuS2VlcFdoaXRlc3BhY2VcclxuICAgICAgICAgICAgfSBhcyBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7IHN1Z2dlc3Rpb25zIH0gYXMgbW9uYWNvLmxhbmd1YWdlcy5Qcm92aWRlclJlc3VsdDxtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25MaXN0PjtcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIENvbmZpZ3VyZUxpcXVpZEludGVsbGlzZW5zZShtb25hY286IGFueSwgc3VnZ2VzdEh0bWw6IGJvb2xlYW4gPSB0cnVlKSB7XHJcbiAgICBpZiAoc3VnZ2VzdEh0bWwpIHtcclxuICAgICAgICB2YXIgbW9kZUNvbmZpZ3VyYXRpb246IG1vbmFjby5sYW5ndWFnZXMuaHRtbC5Nb2RlQ29uZmlndXJhdGlvbiA9IHtcclxuICAgICAgICAgICAgY29tcGxldGlvbkl0ZW1zOiB0cnVlLFxyXG4gICAgICAgICAgICBjb2xvcnM6IHRydWUsXHJcbiAgICAgICAgICAgIGZvbGRpbmdSYW5nZXM6IHRydWUsXHJcbiAgICAgICAgICAgIHNlbGVjdGlvblJhbmdlczogdHJ1ZSxcclxuICAgICAgICAgICAgZGlhZ25vc3RpY3M6IGZhbHNlLFxyXG4gICAgICAgICAgICBkb2N1bWVudEZvcm1hdHRpbmdFZGl0czogdHJ1ZSxcclxuICAgICAgICAgICAgZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0czogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIG9wdGlvbnM6IG1vbmFjby5sYW5ndWFnZXMuaHRtbC5PcHRpb25zID0ge1xyXG4gICAgICAgICAgICBmb3JtYXQ6IG1vbmFjby5sYW5ndWFnZXMuaHRtbC5odG1sRGVmYXVsdHMub3B0aW9ucy5mb3JtYXQsXHJcbiAgICAgICAgICAgIHN1Z2dlc3Q6IHsgaHRtbDU6IHRydWUgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBtb25hY28ubGFuZ3VhZ2VzLmh0bWwucmVnaXN0ZXJIVE1MTGFuZ3VhZ2VTZXJ2aWNlKCdsaXF1aWQnLCBvcHRpb25zLCBtb2RlQ29uZmlndXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIoJ2xpcXVpZCcsIGNvbXBsZXRpb25JdGVtUHJvdmlkZXIpO1xyXG59XHJcbiJdfQ==
